// Automatically generated by MockGen. DO NOT EDIT!
// Source: /Users/prungta/code/gocode/src/github.com/m3db/m3em/operator/types.go

package operator

import (
	gomock "github.com/golang/mock/gomock"
	build "github.com/m3db/m3em/build"
	instrument "github.com/m3db/m3x/instrument"
	time "time"
)

// Mock of Operator interface
type MockOperator struct {
	ctrl     *gomock.Controller
	recorder *_MockOperatorRecorder
}

// Recorder for MockOperator (not exported)
type _MockOperatorRecorder struct {
	mock *MockOperator
}

func NewMockOperator(ctrl *gomock.Controller) *MockOperator {
	mock := &MockOperator{ctrl: ctrl}
	mock.recorder = &_MockOperatorRecorder{mock}
	return mock
}

func (_m *MockOperator) EXPECT() *_MockOperatorRecorder {
	return _m.recorder
}

func (_m *MockOperator) Setup(build build.ServiceBuild, config build.ServiceConfiguration, token string, force bool) error {
	ret := _m.ctrl.Call(_m, "Setup", build, config, token, force)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOperatorRecorder) Setup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Setup", arg0, arg1, arg2, arg3)
}

func (_m *MockOperator) Teardown() error {
	ret := _m.ctrl.Call(_m, "Teardown")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOperatorRecorder) Teardown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Teardown")
}

func (_m *MockOperator) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOperatorRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}

func (_m *MockOperator) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOperatorRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

func (_m *MockOperator) Reset() error {
	ret := _m.ctrl.Call(_m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOperatorRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset")
}

// Mock of Options interface
type MockOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockOptionsRecorder
}

// Recorder for MockOptions (not exported)
type _MockOptionsRecorder struct {
	mock *MockOptions
}

func NewMockOptions(ctrl *gomock.Controller) *MockOptions {
	mock := &MockOptions{ctrl: ctrl}
	mock.recorder = &_MockOptionsRecorder{mock}
	return mock
}

func (_m *MockOptions) EXPECT() *_MockOptionsRecorder {
	return _m.recorder
}

func (_m *MockOptions) SetInstrumentOptions(_param0 instrument.Options) Options {
	ret := _m.ctrl.Call(_m, "SetInstrumentOptions", _param0)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetInstrumentOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstrumentOptions", arg0)
}

func (_m *MockOptions) InstrumentOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "InstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) InstrumentOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstrumentOptions")
}

func (_m *MockOptions) SetTimeout(_param0 time.Duration) Options {
	ret := _m.ctrl.Call(_m, "SetTimeout", _param0)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTimeout", arg0)
}

func (_m *MockOptions) Timeout() time.Duration {
	ret := _m.ctrl.Call(_m, "Timeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockOptionsRecorder) Timeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Timeout")
}

func (_m *MockOptions) SetTransferBufferSize(_param0 int) Options {
	ret := _m.ctrl.Call(_m, "SetTransferBufferSize", _param0)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetTransferBufferSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTransferBufferSize", arg0)
}

func (_m *MockOptions) TransferBufferSize() int {
	ret := _m.ctrl.Call(_m, "TransferBufferSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) TransferBufferSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TransferBufferSize")
}
