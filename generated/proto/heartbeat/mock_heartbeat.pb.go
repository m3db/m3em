// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3em/generated/proto/heartbeat (interfaces: HeartbeaterClient,HeartbeaterServer)

package heartbeat

import (
	gomock "github.com/golang/mock/gomock"

	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Mock of HeartbeaterClient interface
type MockHeartbeaterClient struct {
	ctrl     *gomock.Controller
	recorder *_MockHeartbeaterClientRecorder
}

// Recorder for MockHeartbeaterClient (not exported)
type _MockHeartbeaterClientRecorder struct {
	mock *MockHeartbeaterClient
}

func NewMockHeartbeaterClient(ctrl *gomock.Controller) *MockHeartbeaterClient {
	mock := &MockHeartbeaterClient{ctrl: ctrl}
	mock.recorder = &_MockHeartbeaterClientRecorder{mock}
	return mock
}

func (_m *MockHeartbeaterClient) EXPECT() *_MockHeartbeaterClientRecorder {
	return _m.recorder
}

func (_m *MockHeartbeaterClient) Heartbeat(_param0 context.Context, _param1 *HeartbeatRequest, _param2 ...grpc.CallOption) (*HeartbeatResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Heartbeat", _s...)
	ret0, _ := ret[0].(*HeartbeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockHeartbeaterClientRecorder) Heartbeat(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Heartbeat", _s...)
}

// Mock of HeartbeaterServer interface
type MockHeartbeaterServer struct {
	ctrl     *gomock.Controller
	recorder *_MockHeartbeaterServerRecorder
}

// Recorder for MockHeartbeaterServer (not exported)
type _MockHeartbeaterServerRecorder struct {
	mock *MockHeartbeaterServer
}

func NewMockHeartbeaterServer(ctrl *gomock.Controller) *MockHeartbeaterServer {
	mock := &MockHeartbeaterServer{ctrl: ctrl}
	mock.recorder = &_MockHeartbeaterServerRecorder{mock}
	return mock
}

func (_m *MockHeartbeaterServer) EXPECT() *_MockHeartbeaterServerRecorder {
	return _m.recorder
}

func (_m *MockHeartbeaterServer) Heartbeat(_param0 context.Context, _param1 *HeartbeatRequest) (*HeartbeatResponse, error) {
	ret := _m.ctrl.Call(_m, "Heartbeat", _param0, _param1)
	ret0, _ := ret[0].(*HeartbeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockHeartbeaterServerRecorder) Heartbeat(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Heartbeat", arg0, arg1)
}
