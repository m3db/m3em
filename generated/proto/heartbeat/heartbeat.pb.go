// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go.
// source: heartbeat.proto
// DO NOT EDIT!

/*
Package heartbeat is a generated protocol buffer package.

It is generated from these files:
	heartbeat.proto

It has these top-level messages:
	HeartbeatRequest
	HeartbeatResponse
*/
package heartbeat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HeartbeatCode int32

const (
	HeartbeatCode_UNKNOWN             HeartbeatCode = 0
	HeartbeatCode_HEALTHY             HeartbeatCode = 1
	HeartbeatCode_PROCESS_TERMINATION HeartbeatCode = 2
	HeartbeatCode_OVERWRITTEN         HeartbeatCode = 3
)

var HeartbeatCode_name = map[int32]string{
	0: "UNKNOWN",
	1: "HEALTHY",
	2: "PROCESS_TERMINATION",
	3: "OVERWRITTEN",
}
var HeartbeatCode_value = map[string]int32{
	"UNKNOWN":             0,
	"HEALTHY":             1,
	"PROCESS_TERMINATION": 2,
	"OVERWRITTEN":         3,
}

func (x HeartbeatCode) String() string {
	return proto.EnumName(HeartbeatCode_name, int32(x))
}
func (HeartbeatCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HeartbeatRequest struct {
	Code           HeartbeatCode `protobuf:"varint,1,opt,name=code,enum=heartbeat.HeartbeatCode" json:"code,omitempty"`
	Error          string        `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	ProcessRunning bool          `protobuf:"varint,3,opt,name=processRunning" json:"processRunning,omitempty"`
	Token          string        `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
	ConfigChecksum uint32        `protobuf:"varint,5,opt,name=config_checksum,json=configChecksum" json:"config_checksum,omitempty"`
	BinaryChecksum uint32        `protobuf:"varint,6,opt,name=binary_checksum,json=binaryChecksum" json:"binary_checksum,omitempty"`
}

func (m *HeartbeatRequest) Reset()                    { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()               {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HeartbeatRequest) GetCode() HeartbeatCode {
	if m != nil {
		return m.Code
	}
	return HeartbeatCode_UNKNOWN
}

func (m *HeartbeatRequest) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *HeartbeatRequest) GetProcessRunning() bool {
	if m != nil {
		return m.ProcessRunning
	}
	return false
}

func (m *HeartbeatRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *HeartbeatRequest) GetConfigChecksum() uint32 {
	if m != nil {
		return m.ConfigChecksum
	}
	return 0
}

func (m *HeartbeatRequest) GetBinaryChecksum() uint32 {
	if m != nil {
		return m.BinaryChecksum
	}
	return 0
}

type HeartbeatResponse struct {
}

func (m *HeartbeatResponse) Reset()                    { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()               {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*HeartbeatRequest)(nil), "heartbeat.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "heartbeat.HeartbeatResponse")
	proto.RegisterEnum("heartbeat.HeartbeatCode", HeartbeatCode_name, HeartbeatCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Heartbeater service

type HeartbeaterClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type heartbeaterClient struct {
	cc *grpc.ClientConn
}

func NewHeartbeaterClient(cc *grpc.ClientConn) HeartbeaterClient {
	return &heartbeaterClient{cc}
}

func (c *heartbeaterClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := grpc.Invoke(ctx, "/heartbeat.Heartbeater/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Heartbeater service

type HeartbeaterServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
}

func RegisterHeartbeaterServer(s *grpc.Server, srv HeartbeaterServer) {
	s.RegisterService(&_Heartbeater_serviceDesc, srv)
}

func _Heartbeater_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeaterServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heartbeat.Heartbeater/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeaterServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Heartbeater_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heartbeat.Heartbeater",
	HandlerType: (*HeartbeaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _Heartbeater_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heartbeat.proto",
}

func init() { proto.RegisterFile("heartbeat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0xdf, 0x4e, 0xc2, 0x30,
	0x14, 0xc6, 0x2d, 0xff, 0x94, 0x43, 0x80, 0x59, 0x4c, 0x6c, 0xd4, 0x8b, 0x85, 0x0b, 0x5d, 0x8c,
	0xe1, 0x02, 0x9f, 0x80, 0x90, 0x19, 0x88, 0xda, 0x99, 0x32, 0x24, 0x5e, 0x11, 0x18, 0x47, 0x20,
	0xc4, 0x16, 0xdb, 0x71, 0xe1, 0x0b, 0xfb, 0x1c, 0x66, 0x2b, 0x0c, 0x35, 0x5c, 0x7e, 0xbf, 0xfe,
	0xbe, 0xa6, 0xe7, 0x14, 0xea, 0x0b, 0x9c, 0xe8, 0x78, 0x8a, 0x93, 0xb8, 0xb5, 0xd6, 0x2a, 0x56,
	0xb4, 0x9c, 0x81, 0xe6, 0x37, 0x01, 0xa7, 0xb7, 0x4b, 0x02, 0x3f, 0x37, 0x68, 0x62, 0x7a, 0x07,
	0x85, 0x48, 0xcd, 0x90, 0x11, 0x97, 0x78, 0xb5, 0x36, 0x6b, 0xed, 0xfb, 0x99, 0xda, 0x55, 0x33,
	0x14, 0xa9, 0x45, 0xcf, 0xa0, 0x88, 0x5a, 0x2b, 0xcd, 0x72, 0x2e, 0xf1, 0xca, 0xc2, 0x06, 0x7a,
	0x0d, 0xb5, 0xb5, 0x56, 0x11, 0x1a, 0x23, 0x36, 0x52, 0x2e, 0xe5, 0x9c, 0xe5, 0x5d, 0xe2, 0x9d,
	0x88, 0x7f, 0x34, 0x69, 0xc7, 0x6a, 0x85, 0x92, 0x15, 0x6c, 0x3b, 0x0d, 0xf4, 0x06, 0xea, 0x91,
	0x92, 0xef, 0xcb, 0xf9, 0x38, 0x5a, 0x60, 0xb4, 0x32, 0x9b, 0x0f, 0x56, 0x74, 0x89, 0x57, 0x15,
	0x35, 0x8b, 0xbb, 0x5b, 0x9a, 0x88, 0xd3, 0xa5, 0x9c, 0xe8, 0xaf, 0xbd, 0x58, 0xb2, 0xa2, 0xc5,
	0x3b, 0xb1, 0xd9, 0x80, 0xd3, 0x5f, 0x73, 0x9a, 0xb5, 0x92, 0x06, 0x6f, 0x07, 0x50, 0xfd, 0x33,
	0x11, 0xad, 0xc0, 0xf1, 0x90, 0x3f, 0xf2, 0x60, 0xc4, 0x9d, 0xa3, 0x24, 0xf4, 0xfc, 0xce, 0x53,
	0xd8, 0x7b, 0x73, 0x08, 0x3d, 0x87, 0xc6, 0x8b, 0x08, 0xba, 0xfe, 0x60, 0x30, 0x0e, 0x7d, 0xf1,
	0xdc, 0xe7, 0x9d, 0xb0, 0x1f, 0x70, 0x27, 0x47, 0xeb, 0x50, 0x09, 0x5e, 0x7d, 0x31, 0x12, 0xfd,
	0x30, 0xf4, 0xb9, 0x93, 0x6f, 0x0f, 0xa1, 0x92, 0x5d, 0x8a, 0x9a, 0x3e, 0x40, 0x39, 0x8b, 0xf4,
	0xf2, 0xd0, 0x2e, 0xb7, 0x6b, 0xbf, 0xb8, 0x3a, 0x7c, 0x68, 0xdf, 0x3a, 0x2d, 0xa5, 0x7f, 0x77,
	0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xab, 0xd8, 0x6a, 0x8d, 0xce, 0x01, 0x00, 0x00,
}
