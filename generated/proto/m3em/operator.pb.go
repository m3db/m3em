// Code generated by protoc-gen-go.
// source: operator.proto
// DO NOT EDIT!

/*
Package m3em is a generated protocol buffer package.

It is generated from these files:
	operator.proto

It has these top-level messages:
	SetupRequest
	SetupResponse
	TransferRequest
	TransferResponse
	StartRequest
	StartResponse
	StopRequest
	StopResponse
	TeardownRequest
	TeardownResponse
	HeartbeatRequest
	HeartbeatResponse
*/
package m3em

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FileType int32

const (
	FileType_UNKNOWN     FileType = 0
	FileType_M3DB_BINARY FileType = 1
	FileType_M3DB_CONFIG FileType = 2
)

var FileType_name = map[int32]string{
	0: "UNKNOWN",
	1: "M3DB_BINARY",
	2: "M3DB_CONFIG",
}
var FileType_value = map[string]int32{
	"UNKNOWN":     0,
	"M3DB_BINARY": 1,
	"M3DB_CONFIG": 2,
}

func (x FileType) String() string {
	return proto.EnumName(FileType_name, int32(x))
}
func (FileType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HeartbeatCode int32

const (
	HeartbeatCode_HEARTBEAT_CODE_UNKNOWN             HeartbeatCode = 0
	HeartbeatCode_HEARTBEAT_CODE_HEALTHY             HeartbeatCode = 1
	HeartbeatCode_HEARTBEAT_CODE_PROCESS_TERMINATION HeartbeatCode = 2
	HeartbeatCode_HEARTBEAT_CODE_OVERWRITTEN         HeartbeatCode = 3
)

var HeartbeatCode_name = map[int32]string{
	0: "HEARTBEAT_CODE_UNKNOWN",
	1: "HEARTBEAT_CODE_HEALTHY",
	2: "HEARTBEAT_CODE_PROCESS_TERMINATION",
	3: "HEARTBEAT_CODE_OVERWRITTEN",
}
var HeartbeatCode_value = map[string]int32{
	"HEARTBEAT_CODE_UNKNOWN":             0,
	"HEARTBEAT_CODE_HEALTHY":             1,
	"HEARTBEAT_CODE_PROCESS_TERMINATION": 2,
	"HEARTBEAT_CODE_OVERWRITTEN":         3,
}

func (x HeartbeatCode) String() string {
	return proto.EnumName(HeartbeatCode_name, int32(x))
}
func (HeartbeatCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SetupRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Force bool   `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
}

func (m *SetupRequest) Reset()                    { *m = SetupRequest{} }
func (m *SetupRequest) String() string            { return proto.CompactTextString(m) }
func (*SetupRequest) ProtoMessage()               {}
func (*SetupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SetupRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SetupRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type SetupResponse struct {
}

func (m *SetupResponse) Reset()                    { *m = SetupResponse{} }
func (m *SetupResponse) String() string            { return proto.CompactTextString(m) }
func (*SetupResponse) ProtoMessage()               {}
func (*SetupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type TransferRequest struct {
	Type       FileType `protobuf:"varint,1,opt,name=type,enum=m3em.FileType" json:"type,omitempty"`
	Filename   string   `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	Overwrite  bool     `protobuf:"varint,3,opt,name=overwrite" json:"overwrite,omitempty"`
	ChunkIdx   int32    `protobuf:"varint,4,opt,name=chunk_idx,json=chunkIdx" json:"chunk_idx,omitempty"`
	ChunkBytes []byte   `protobuf:"bytes,5,opt,name=chunk_bytes,json=chunkBytes,proto3" json:"chunk_bytes,omitempty"`
}

func (m *TransferRequest) Reset()                    { *m = TransferRequest{} }
func (m *TransferRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferRequest) ProtoMessage()               {}
func (*TransferRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TransferRequest) GetType() FileType {
	if m != nil {
		return m.Type
	}
	return FileType_UNKNOWN
}

func (m *TransferRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *TransferRequest) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

func (m *TransferRequest) GetChunkIdx() int32 {
	if m != nil {
		return m.ChunkIdx
	}
	return 0
}

func (m *TransferRequest) GetChunkBytes() []byte {
	if m != nil {
		return m.ChunkBytes
	}
	return nil
}

type TransferResponse struct {
	FileChecksum   uint32 `protobuf:"varint,1,opt,name=file_checksum,json=fileChecksum" json:"file_checksum,omitempty"`
	NumChunksRecvd int32  `protobuf:"varint,2,opt,name=num_chunks_recvd,json=numChunksRecvd" json:"num_chunks_recvd,omitempty"`
}

func (m *TransferResponse) Reset()                    { *m = TransferResponse{} }
func (m *TransferResponse) String() string            { return proto.CompactTextString(m) }
func (*TransferResponse) ProtoMessage()               {}
func (*TransferResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TransferResponse) GetFileChecksum() uint32 {
	if m != nil {
		return m.FileChecksum
	}
	return 0
}

func (m *TransferResponse) GetNumChunksRecvd() int32 {
	if m != nil {
		return m.NumChunksRecvd
	}
	return 0
}

type StartRequest struct {
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type StartResponse struct {
}

func (m *StartResponse) Reset()                    { *m = StartResponse{} }
func (m *StartResponse) String() string            { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()               {}
func (*StartResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type StopRequest struct {
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type StopResponse struct {
}

func (m *StopResponse) Reset()                    { *m = StopResponse{} }
func (m *StopResponse) String() string            { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()               {}
func (*StopResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type TeardownRequest struct {
}

func (m *TeardownRequest) Reset()                    { *m = TeardownRequest{} }
func (m *TeardownRequest) String() string            { return proto.CompactTextString(m) }
func (*TeardownRequest) ProtoMessage()               {}
func (*TeardownRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type TeardownResponse struct {
}

func (m *TeardownResponse) Reset()                    { *m = TeardownResponse{} }
func (m *TeardownResponse) String() string            { return proto.CompactTextString(m) }
func (*TeardownResponse) ProtoMessage()               {}
func (*TeardownResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type HeartbeatRequest struct {
	FrequencySecs uint32 `protobuf:"varint,1,opt,name=frequency_secs,json=frequencySecs" json:"frequency_secs,omitempty"`
}

func (m *HeartbeatRequest) Reset()                    { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()               {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *HeartbeatRequest) GetFrequencySecs() uint32 {
	if m != nil {
		return m.FrequencySecs
	}
	return 0
}

type HeartbeatResponse struct {
	Code           HeartbeatCode `protobuf:"varint,1,opt,name=code,enum=m3em.HeartbeatCode" json:"code,omitempty"`
	Error          string        `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	ProcessRunning bool          `protobuf:"varint,3,opt,name=processRunning" json:"processRunning,omitempty"`
}

func (m *HeartbeatResponse) Reset()                    { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()               {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *HeartbeatResponse) GetCode() HeartbeatCode {
	if m != nil {
		return m.Code
	}
	return HeartbeatCode_HEARTBEAT_CODE_UNKNOWN
}

func (m *HeartbeatResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *HeartbeatResponse) GetProcessRunning() bool {
	if m != nil {
		return m.ProcessRunning
	}
	return false
}

func init() {
	proto.RegisterType((*SetupRequest)(nil), "m3em.SetupRequest")
	proto.RegisterType((*SetupResponse)(nil), "m3em.SetupResponse")
	proto.RegisterType((*TransferRequest)(nil), "m3em.TransferRequest")
	proto.RegisterType((*TransferResponse)(nil), "m3em.TransferResponse")
	proto.RegisterType((*StartRequest)(nil), "m3em.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "m3em.StartResponse")
	proto.RegisterType((*StopRequest)(nil), "m3em.StopRequest")
	proto.RegisterType((*StopResponse)(nil), "m3em.StopResponse")
	proto.RegisterType((*TeardownRequest)(nil), "m3em.TeardownRequest")
	proto.RegisterType((*TeardownResponse)(nil), "m3em.TeardownResponse")
	proto.RegisterType((*HeartbeatRequest)(nil), "m3em.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "m3em.HeartbeatResponse")
	proto.RegisterEnum("m3em.FileType", FileType_name, FileType_value)
	proto.RegisterEnum("m3em.HeartbeatCode", HeartbeatCode_name, HeartbeatCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Operator service

type OperatorClient interface {
	Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupResponse, error)
	Transfer(ctx context.Context, opts ...grpc.CallOption) (Operator_TransferClient, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	Teardown(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption) (*TeardownResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (Operator_HeartbeatClient, error)
}

type operatorClient struct {
	cc *grpc.ClientConn
}

func NewOperatorClient(cc *grpc.ClientConn) OperatorClient {
	return &operatorClient{cc}
}

func (c *operatorClient) Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupResponse, error) {
	out := new(SetupResponse)
	err := grpc.Invoke(ctx, "/m3em.Operator/Setup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) Transfer(ctx context.Context, opts ...grpc.CallOption) (Operator_TransferClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Operator_serviceDesc.Streams[0], c.cc, "/m3em.Operator/Transfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &operatorTransferClient{stream}
	return x, nil
}

type Operator_TransferClient interface {
	Send(*TransferRequest) error
	CloseAndRecv() (*TransferResponse, error)
	grpc.ClientStream
}

type operatorTransferClient struct {
	grpc.ClientStream
}

func (x *operatorTransferClient) Send(m *TransferRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *operatorTransferClient) CloseAndRecv() (*TransferResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TransferResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operatorClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := grpc.Invoke(ctx, "/m3em.Operator/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := grpc.Invoke(ctx, "/m3em.Operator/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) Teardown(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption) (*TeardownResponse, error) {
	out := new(TeardownResponse)
	err := grpc.Invoke(ctx, "/m3em.Operator/Teardown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (Operator_HeartbeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Operator_serviceDesc.Streams[1], c.cc, "/m3em.Operator/Heartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &operatorHeartbeatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Operator_HeartbeatClient interface {
	Recv() (*HeartbeatResponse, error)
	grpc.ClientStream
}

type operatorHeartbeatClient struct {
	grpc.ClientStream
}

func (x *operatorHeartbeatClient) Recv() (*HeartbeatResponse, error) {
	m := new(HeartbeatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Operator service

type OperatorServer interface {
	Setup(context.Context, *SetupRequest) (*SetupResponse, error)
	Transfer(Operator_TransferServer) error
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	Teardown(context.Context, *TeardownRequest) (*TeardownResponse, error)
	Heartbeat(*HeartbeatRequest, Operator_HeartbeatServer) error
}

func RegisterOperatorServer(s *grpc.Server, srv OperatorServer) {
	s.RegisterService(&_Operator_serviceDesc, srv)
}

func _Operator_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3em.Operator/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).Setup(ctx, req.(*SetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_Transfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperatorServer).Transfer(&operatorTransferServer{stream})
}

type Operator_TransferServer interface {
	SendAndClose(*TransferResponse) error
	Recv() (*TransferRequest, error)
	grpc.ServerStream
}

type operatorTransferServer struct {
	grpc.ServerStream
}

func (x *operatorTransferServer) SendAndClose(m *TransferResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *operatorTransferServer) Recv() (*TransferRequest, error) {
	m := new(TransferRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Operator_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3em.Operator/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3em.Operator/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeardownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m3em.Operator/Teardown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).Teardown(ctx, req.(*TeardownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HeartbeatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServer).Heartbeat(m, &operatorHeartbeatServer{stream})
}

type Operator_HeartbeatServer interface {
	Send(*HeartbeatResponse) error
	grpc.ServerStream
}

type operatorHeartbeatServer struct {
	grpc.ServerStream
}

func (x *operatorHeartbeatServer) Send(m *HeartbeatResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Operator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "m3em.Operator",
	HandlerType: (*OperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _Operator_Setup_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Operator_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Operator_Stop_Handler,
		},
		{
			MethodName: "Teardown",
			Handler:    _Operator_Teardown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transfer",
			Handler:       _Operator_Transfer_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Heartbeat",
			Handler:       _Operator_Heartbeat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "operator.proto",
}

func init() { proto.RegisterFile("operator.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x94, 0xdd, 0x6e, 0xda, 0x48,
	0x14, 0xc7, 0xd7, 0x04, 0x76, 0xcd, 0x01, 0x8c, 0x33, 0xd9, 0xcd, 0x22, 0x5a, 0xb5, 0xc8, 0x55,
	0x53, 0x14, 0xa9, 0x51, 0x94, 0x5c, 0xa5, 0x95, 0x2a, 0x01, 0x71, 0x0a, 0x6a, 0x63, 0x57, 0x83,
	0xdb, 0xa8, 0x57, 0x96, 0x63, 0x0e, 0x0d, 0x4a, 0xf0, 0xb8, 0x63, 0x3b, 0x09, 0x7d, 0x89, 0x3e,
	0x49, 0x1f, 0xa7, 0xef, 0x53, 0x79, 0xc6, 0x36, 0xc4, 0xb9, 0xe3, 0xfc, 0xce, 0xa7, 0xcf, 0xf9,
	0x0f, 0xa0, 0xb1, 0x10, 0xb9, 0x17, 0x33, 0x7e, 0x10, 0x72, 0x16, 0x33, 0x52, 0x5d, 0x1e, 0xe3,
	0xd2, 0x78, 0x03, 0xcd, 0x29, 0xc6, 0x49, 0x48, 0xf1, 0x7b, 0x82, 0x51, 0x4c, 0xfe, 0x85, 0x5a,
	0xcc, 0xae, 0x31, 0xe8, 0x28, 0x3d, 0xa5, 0x5f, 0xa7, 0xd2, 0x48, 0xe9, 0x9c, 0x71, 0x1f, 0x3b,
	0x95, 0x9e, 0xd2, 0x57, 0xa9, 0x34, 0x8c, 0x36, 0xb4, 0xb2, 0xdc, 0x28, 0x64, 0x41, 0x84, 0xc6,
	0x2f, 0x05, 0xda, 0x0e, 0xf7, 0x82, 0x68, 0x8e, 0x3c, 0x2f, 0x68, 0x40, 0x35, 0x5e, 0x85, 0x28,
	0xea, 0x69, 0x47, 0xda, 0x41, 0xda, 0xf5, 0xe0, 0x6c, 0x71, 0x83, 0xce, 0x2a, 0x44, 0x2a, 0x7c,
	0xa4, 0x0b, 0xea, 0x7c, 0x71, 0x83, 0x81, 0xb7, 0x94, 0x1d, 0xea, 0xb4, 0xb0, 0xc9, 0x53, 0xa8,
	0xb3, 0x5b, 0xe4, 0x77, 0x7c, 0x11, 0x63, 0x67, 0x4b, 0xb4, 0x5f, 0x03, 0xf2, 0x04, 0xea, 0xfe,
	0x55, 0x12, 0x5c, 0xbb, 0x8b, 0xd9, 0x7d, 0xa7, 0xda, 0x53, 0xfa, 0x35, 0xaa, 0x0a, 0x30, 0x99,
	0xdd, 0x93, 0xe7, 0xd0, 0x90, 0xce, 0xcb, 0x55, 0x8c, 0x51, 0xa7, 0xd6, 0x53, 0xfa, 0x4d, 0x0a,
	0x02, 0x0d, 0x53, 0x62, 0x78, 0xa0, 0xaf, 0xc7, 0x95, 0xdf, 0x40, 0x5e, 0x40, 0x2b, 0xed, 0xed,
	0xfa, 0x57, 0xe8, 0x5f, 0x47, 0xc9, 0x52, 0x0c, 0xde, 0xa2, 0xcd, 0x14, 0x8e, 0x32, 0x46, 0xfa,
	0xa0, 0x07, 0xc9, 0xd2, 0x15, 0xa5, 0x22, 0x97, 0xa3, 0x7f, 0x3b, 0x13, 0x83, 0xd7, 0xa8, 0x16,
	0x24, 0xcb, 0x91, 0xc0, 0x34, 0xa5, 0x86, 0x06, 0xcd, 0x69, 0xec, 0xf1, 0x38, 0x5b, 0x87, 0xd8,
	0x99, 0xb4, 0xb3, 0x9d, 0xb5, 0xa0, 0x31, 0x8d, 0x59, 0xbe, 0x7f, 0x19, 0xcf, 0xd6, 0x2b, 0xdd,
	0x86, 0xb6, 0x83, 0x1e, 0x9f, 0xb1, 0xbb, 0x20, 0x0f, 0x21, 0xa0, 0xaf, 0x51, 0x16, 0x76, 0x02,
	0xfa, 0x18, 0x3d, 0x1e, 0x5f, 0xa2, 0x97, 0xb7, 0x22, 0x2f, 0x41, 0x9b, 0xf3, 0xf4, 0x77, 0xe0,
	0xaf, 0xdc, 0x08, 0xfd, 0x28, 0xfb, 0x94, 0x56, 0x41, 0xa7, 0xe8, 0x47, 0xc6, 0x0f, 0xd8, 0xde,
	0x48, 0xcd, 0xb6, 0xf0, 0x0a, 0xaa, 0x3e, 0x9b, 0xe5, 0x57, 0xdb, 0x91, 0x57, 0x2b, 0xc2, 0x46,
	0x6c, 0x86, 0x54, 0x04, 0xa4, 0xca, 0x40, 0xce, 0x19, 0xcf, 0xee, 0x26, 0x0d, 0xb2, 0x07, 0x5a,
	0xc8, 0x99, 0x8f, 0x51, 0x44, 0x93, 0x20, 0x58, 0x04, 0xdf, 0xb2, 0xcb, 0x95, 0xe8, 0xfe, 0x09,
	0xa8, 0xb9, 0x14, 0x48, 0x03, 0xfe, 0xf9, 0x6c, 0x7d, 0xb0, 0xec, 0x0b, 0x4b, 0xff, 0x8b, 0xb4,
	0xa1, 0x71, 0x7e, 0x7c, 0x3a, 0x74, 0x87, 0x13, 0x6b, 0x40, 0xbf, 0xea, 0x4a, 0x01, 0x46, 0xb6,
	0x75, 0x36, 0x79, 0xaf, 0x57, 0xf6, 0x7f, 0x2a, 0xd0, 0x7a, 0x30, 0x10, 0xe9, 0xc2, 0xee, 0xd8,
	0x1c, 0x50, 0x67, 0x68, 0x0e, 0x1c, 0x77, 0x64, 0x9f, 0x9a, 0xee, 0xba, 0xde, 0x63, 0xdf, 0xd8,
	0x1c, 0x7c, 0x74, 0xc6, 0x69, 0xe9, 0x3d, 0x30, 0x4a, 0xbe, 0x4f, 0xd4, 0x1e, 0x99, 0xd3, 0xa9,
	0xeb, 0x98, 0xf4, 0x7c, 0x62, 0x0d, 0x9c, 0x89, 0x6d, 0xe9, 0x15, 0xf2, 0x0c, 0xba, 0xa5, 0x38,
	0xfb, 0x8b, 0x49, 0x2f, 0xe8, 0xc4, 0x71, 0x4c, 0x4b, 0xdf, 0x3a, 0xfa, 0x5d, 0x01, 0xd5, 0xce,
	0xde, 0x18, 0x39, 0x84, 0x9a, 0x78, 0x1b, 0x84, 0xc8, 0xdd, 0x6d, 0x3e, 0xb2, 0xee, 0xce, 0x03,
	0x96, 0xad, 0xfc, 0x2d, 0xa8, 0xb9, 0x18, 0xc9, 0x7f, 0x32, 0xa0, 0xf4, 0x96, 0xba, 0xbb, 0x65,
	0x2c, 0x53, 0xfb, 0x8a, 0x68, 0x97, 0xca, 0xaa, 0x68, 0xb7, 0xa1, 0xb9, 0xa2, 0xdd, 0xa6, 0xee,
	0xc8, 0x6b, 0xa8, 0xa6, 0x42, 0x23, 0xdb, 0xb9, 0xb3, 0xd0, 0x60, 0x97, 0x6c, 0xa2, 0x2c, 0xfc,
	0x04, 0xd4, 0x5c, 0x74, 0xc5, 0x74, 0x0f, 0x75, 0x59, 0x4c, 0x57, 0xd2, 0x26, 0x79, 0x07, 0xf5,
	0xe2, 0x50, 0x64, 0xb7, 0x24, 0xa5, 0x3c, 0xf9, 0xff, 0x47, 0x5c, 0x66, 0x1f, 0x2a, 0x97, 0x7f,
	0x8b, 0xff, 0xab, 0xe3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x33, 0xa4, 0x37, 0xc1, 0x04,
	0x00, 0x00,
}
