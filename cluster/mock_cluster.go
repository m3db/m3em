// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3em/cluster/types.go

package cluster

import (
	gomock "github.com/golang/mock/gomock"
	services "github.com/m3db/m3cluster/services"
	build "github.com/m3db/m3em/build"
	environment "github.com/m3db/m3em/environment"
	instrument "github.com/m3db/m3x/instrument"
)

// Mock of Cluster interface
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *_MockClusterRecorder
}

// Recorder for MockCluster (not exported)
type _MockClusterRecorder struct {
	mock *MockCluster
}

func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &_MockClusterRecorder{mock}
	return mock
}

func (_m *MockCluster) EXPECT() *_MockClusterRecorder {
	return _m.recorder
}

func (_m *MockCluster) Setup() error {
	ret := _m.ctrl.Call(_m, "Setup")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClusterRecorder) Setup() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Setup")
}

func (_m *MockCluster) Initialize(numNodes int) ([]environment.M3DBInstance, error) {
	ret := _m.ctrl.Call(_m, "Initialize", numNodes)
	ret0, _ := ret[0].([]environment.M3DBInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClusterRecorder) Initialize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Initialize", arg0)
}

func (_m *MockCluster) AddInstance() (environment.M3DBInstance, error) {
	ret := _m.ctrl.Call(_m, "AddInstance")
	ret0, _ := ret[0].(environment.M3DBInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClusterRecorder) AddInstance() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddInstance")
}

func (_m *MockCluster) RemoveInstance(_param0 environment.M3DBInstance) error {
	ret := _m.ctrl.Call(_m, "RemoveInstance", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClusterRecorder) RemoveInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveInstance", arg0)
}

func (_m *MockCluster) ReplaceInstance(oldInstance environment.M3DBInstance) (environment.M3DBInstance, error) {
	ret := _m.ctrl.Call(_m, "ReplaceInstance", oldInstance)
	ret0, _ := ret[0].(environment.M3DBInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClusterRecorder) ReplaceInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReplaceInstance", arg0)
}

func (_m *MockCluster) Spares() []environment.M3DBInstance {
	ret := _m.ctrl.Call(_m, "Spares")
	ret0, _ := ret[0].([]environment.M3DBInstance)
	return ret0
}

func (_mr *_MockClusterRecorder) Spares() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Spares")
}

func (_m *MockCluster) Reset() error {
	ret := _m.ctrl.Call(_m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClusterRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset")
}

func (_m *MockCluster) Teardown() error {
	ret := _m.ctrl.Call(_m, "Teardown")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClusterRecorder) Teardown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Teardown")
}

func (_m *MockCluster) StartInitialized() error {
	ret := _m.ctrl.Call(_m, "StartInitialized")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClusterRecorder) StartInitialized() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartInitialized")
}

func (_m *MockCluster) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClusterRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}

func (_m *MockCluster) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClusterRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

func (_m *MockCluster) Status() Status {
	ret := _m.ctrl.Call(_m, "Status")
	ret0, _ := ret[0].(Status)
	return ret0
}

func (_mr *_MockClusterRecorder) Status() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Status")
}

// Mock of Options interface
type MockOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockOptionsRecorder
}

// Recorder for MockOptions (not exported)
type _MockOptionsRecorder struct {
	mock *MockOptions
}

func NewMockOptions(ctrl *gomock.Controller) *MockOptions {
	mock := &MockOptions{ctrl: ctrl}
	mock.recorder = &_MockOptionsRecorder{mock}
	return mock
}

func (_m *MockOptions) EXPECT() *_MockOptionsRecorder {
	return _m.recorder
}

func (_m *MockOptions) Validate() error {
	ret := _m.ctrl.Call(_m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOptionsRecorder) Validate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Validate")
}

func (_m *MockOptions) SetInstrumentOptions(_param0 instrument.Options) Options {
	ret := _m.ctrl.Call(_m, "SetInstrumentOptions", _param0)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetInstrumentOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstrumentOptions", arg0)
}

func (_m *MockOptions) InstrumentOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "InstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) InstrumentOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstrumentOptions")
}

func (_m *MockOptions) SetServiceBuild(_param0 build.ServiceBuild) Options {
	ret := _m.ctrl.Call(_m, "SetServiceBuild", _param0)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetServiceBuild(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetServiceBuild", arg0)
}

func (_m *MockOptions) ServiceBuild() build.ServiceBuild {
	ret := _m.ctrl.Call(_m, "ServiceBuild")
	ret0, _ := ret[0].(build.ServiceBuild)
	return ret0
}

func (_mr *_MockOptionsRecorder) ServiceBuild() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServiceBuild")
}

func (_m *MockOptions) SetServiceConfig(_param0 build.ServiceConfiguration) Options {
	ret := _m.ctrl.Call(_m, "SetServiceConfig", _param0)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetServiceConfig(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetServiceConfig", arg0)
}

func (_m *MockOptions) ServiceConfig() build.ServiceConfiguration {
	ret := _m.ctrl.Call(_m, "ServiceConfig")
	ret0, _ := ret[0].(build.ServiceConfiguration)
	return ret0
}

func (_mr *_MockOptionsRecorder) ServiceConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServiceConfig")
}

func (_m *MockOptions) SetReplication(_param0 int) Options {
	ret := _m.ctrl.Call(_m, "SetReplication", _param0)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetReplication(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReplication", arg0)
}

func (_m *MockOptions) Replication() int {
	ret := _m.ctrl.Call(_m, "Replication")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) Replication() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Replication")
}

func (_m *MockOptions) SetNumShards(_param0 int) Options {
	ret := _m.ctrl.Call(_m, "SetNumShards", _param0)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetNumShards(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetNumShards", arg0)
}

func (_m *MockOptions) NumShards() int {
	ret := _m.ctrl.Call(_m, "NumShards")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) NumShards() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumShards")
}

func (_m *MockOptions) SetPlacementService(_param0 services.PlacementService) Options {
	ret := _m.ctrl.Call(_m, "SetPlacementService", _param0)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetPlacementService(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPlacementService", arg0)
}

func (_m *MockOptions) PlacementService() services.PlacementService {
	ret := _m.ctrl.Call(_m, "PlacementService")
	ret0, _ := ret[0].(services.PlacementService)
	return ret0
}

func (_mr *_MockOptionsRecorder) PlacementService() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PlacementService")
}

func (_m *MockOptions) SetInstanceConcurrency(_param0 int) Options {
	ret := _m.ctrl.Call(_m, "SetInstanceConcurrency", _param0)
	ret0, _ := ret[0].(Options)
	return ret0
}

func (_mr *_MockOptionsRecorder) SetInstanceConcurrency(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstanceConcurrency", arg0)
}

func (_m *MockOptions) InstanceConcurrency() int {
	ret := _m.ctrl.Call(_m, "InstanceConcurrency")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOptionsRecorder) InstanceConcurrency() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstanceConcurrency")
}
