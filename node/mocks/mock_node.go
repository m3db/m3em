// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3em/node (interfaces: ServiceNode,NodeOptions)

package node

import (
	gomock "github.com/golang/mock/gomock"
	build "github.com/m3db/m3em/build"
	node "github.com/m3db/m3em/node"
	services "github.com/m3db/m3cluster/services"
	shard "github.com/m3db/m3cluster/shard"
	instrument "github.com/m3db/m3x/instrument"
	retry "github.com/m3db/m3x/retry"
	time "time"
)

// Mock of ServiceNode interface
type MockServiceNode struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceNodeRecorder
}

// Recorder for MockServiceNode (not exported)
type _MockServiceNodeRecorder struct {
	mock *MockServiceNode
}

func NewMockServiceNode(ctrl *gomock.Controller) *MockServiceNode {
	mock := &MockServiceNode{ctrl: ctrl}
	mock.recorder = &_MockServiceNodeRecorder{mock}
	return mock
}

func (_m *MockServiceNode) EXPECT() *_MockServiceNodeRecorder {
	return _m.recorder
}

func (_m *MockServiceNode) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockServiceNode) DeregisterListener(_param0 node.ListenerID) {
	_m.ctrl.Call(_m, "DeregisterListener", _param0)
}

func (_mr *_MockServiceNodeRecorder) DeregisterListener(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterListener", arg0)
}

func (_m *MockServiceNode) Endpoint() string {
	ret := _m.ctrl.Call(_m, "Endpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) Endpoint() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Endpoint")
}

func (_m *MockServiceNode) Health() (node.ServiceNodeHealth, error) {
	ret := _m.ctrl.Call(_m, "Health")
	ret0, _ := ret[0].(node.ServiceNodeHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceNodeRecorder) Health() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Health")
}

func (_m *MockServiceNode) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockServiceNode) Rack() string {
	ret := _m.ctrl.Call(_m, "Rack")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) Rack() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rack")
}

func (_m *MockServiceNode) RegisterListener(_param0 node.Listener) node.ListenerID {
	ret := _m.ctrl.Call(_m, "RegisterListener", _param0)
	ret0, _ := ret[0].(node.ListenerID)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) RegisterListener(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterListener", arg0)
}

func (_m *MockServiceNode) SetEndpoint(_param0 string) services.PlacementInstance {
	ret := _m.ctrl.Call(_m, "SetEndpoint", _param0)
	ret0, _ := ret[0].(services.PlacementInstance)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) SetEndpoint(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEndpoint", arg0)
}

func (_m *MockServiceNode) SetID(_param0 string) services.PlacementInstance {
	ret := _m.ctrl.Call(_m, "SetID", _param0)
	ret0, _ := ret[0].(services.PlacementInstance)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) SetID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetID", arg0)
}

func (_m *MockServiceNode) SetRack(_param0 string) services.PlacementInstance {
	ret := _m.ctrl.Call(_m, "SetRack", _param0)
	ret0, _ := ret[0].(services.PlacementInstance)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) SetRack(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRack", arg0)
}

func (_m *MockServiceNode) SetShards(_param0 shard.Shards) services.PlacementInstance {
	ret := _m.ctrl.Call(_m, "SetShards", _param0)
	ret0, _ := ret[0].(services.PlacementInstance)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) SetShards(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetShards", arg0)
}

func (_m *MockServiceNode) SetWeight(_param0 uint32) services.PlacementInstance {
	ret := _m.ctrl.Call(_m, "SetWeight", _param0)
	ret0, _ := ret[0].(services.PlacementInstance)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) SetWeight(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWeight", arg0)
}

func (_m *MockServiceNode) SetZone(_param0 string) services.PlacementInstance {
	ret := _m.ctrl.Call(_m, "SetZone", _param0)
	ret0, _ := ret[0].(services.PlacementInstance)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) SetZone(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetZone", arg0)
}

func (_m *MockServiceNode) Setup(_param0 build.ServiceBuild, _param1 build.ServiceConfiguration, _param2 string, _param3 bool) error {
	ret := _m.ctrl.Call(_m, "Setup", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) Setup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Setup", arg0, arg1, arg2, arg3)
}

func (_m *MockServiceNode) Shards() shard.Shards {
	ret := _m.ctrl.Call(_m, "Shards")
	ret0, _ := ret[0].(shard.Shards)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) Shards() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shards")
}

func (_m *MockServiceNode) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}

func (_m *MockServiceNode) Status() node.NodeStatus {
	ret := _m.ctrl.Call(_m, "Status")
	ret0, _ := ret[0].(node.NodeStatus)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) Status() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Status")
}

func (_m *MockServiceNode) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

func (_m *MockServiceNode) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}

func (_m *MockServiceNode) Teardown() error {
	ret := _m.ctrl.Call(_m, "Teardown")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) Teardown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Teardown")
}

func (_m *MockServiceNode) Weight() uint32 {
	ret := _m.ctrl.Call(_m, "Weight")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) Weight() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Weight")
}

func (_m *MockServiceNode) Zone() string {
	ret := _m.ctrl.Call(_m, "Zone")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceNodeRecorder) Zone() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Zone")
}

// Mock of NodeOptions interface
type MockNodeOptions struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeOptionsRecorder
}

// Recorder for MockNodeOptions (not exported)
type _MockNodeOptionsRecorder struct {
	mock *MockNodeOptions
}

func NewMockNodeOptions(ctrl *gomock.Controller) *MockNodeOptions {
	mock := &MockNodeOptions{ctrl: ctrl}
	mock.recorder = &_MockNodeOptionsRecorder{mock}
	return mock
}

func (_m *MockNodeOptions) EXPECT() *_MockNodeOptionsRecorder {
	return _m.recorder
}

func (_m *MockNodeOptions) HeartbeatOptions() node.HeartbeatOptions {
	ret := _m.ctrl.Call(_m, "HeartbeatOptions")
	ret0, _ := ret[0].(node.HeartbeatOptions)
	return ret0
}

func (_mr *_MockNodeOptionsRecorder) HeartbeatOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HeartbeatOptions")
}

func (_m *MockNodeOptions) InstrumentOptions() instrument.Options {
	ret := _m.ctrl.Call(_m, "InstrumentOptions")
	ret0, _ := ret[0].(instrument.Options)
	return ret0
}

func (_mr *_MockNodeOptionsRecorder) InstrumentOptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstrumentOptions")
}

func (_m *MockNodeOptions) OperationTimeout() time.Duration {
	ret := _m.ctrl.Call(_m, "OperationTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockNodeOptionsRecorder) OperationTimeout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OperationTimeout")
}

func (_m *MockNodeOptions) OperatorClientFn() node.OperatorClientFn {
	ret := _m.ctrl.Call(_m, "OperatorClientFn")
	ret0, _ := ret[0].(node.OperatorClientFn)
	return ret0
}

func (_mr *_MockNodeOptionsRecorder) OperatorClientFn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OperatorClientFn")
}

func (_m *MockNodeOptions) Retrier() retry.Retrier {
	ret := _m.ctrl.Call(_m, "Retrier")
	ret0, _ := ret[0].(retry.Retrier)
	return ret0
}

func (_mr *_MockNodeOptionsRecorder) Retrier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Retrier")
}

func (_m *MockNodeOptions) SetHeartbeatOptions(_param0 node.HeartbeatOptions) node.NodeOptions {
	ret := _m.ctrl.Call(_m, "SetHeartbeatOptions", _param0)
	ret0, _ := ret[0].(node.NodeOptions)
	return ret0
}

func (_mr *_MockNodeOptionsRecorder) SetHeartbeatOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHeartbeatOptions", arg0)
}

func (_m *MockNodeOptions) SetInstrumentOptions(_param0 instrument.Options) node.NodeOptions {
	ret := _m.ctrl.Call(_m, "SetInstrumentOptions", _param0)
	ret0, _ := ret[0].(node.NodeOptions)
	return ret0
}

func (_mr *_MockNodeOptionsRecorder) SetInstrumentOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstrumentOptions", arg0)
}

func (_m *MockNodeOptions) SetOperationTimeout(_param0 time.Duration) node.NodeOptions {
	ret := _m.ctrl.Call(_m, "SetOperationTimeout", _param0)
	ret0, _ := ret[0].(node.NodeOptions)
	return ret0
}

func (_mr *_MockNodeOptionsRecorder) SetOperationTimeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetOperationTimeout", arg0)
}

func (_m *MockNodeOptions) SetOperatorClientFn(_param0 node.OperatorClientFn) node.NodeOptions {
	ret := _m.ctrl.Call(_m, "SetOperatorClientFn", _param0)
	ret0, _ := ret[0].(node.NodeOptions)
	return ret0
}

func (_mr *_MockNodeOptionsRecorder) SetOperatorClientFn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetOperatorClientFn", arg0)
}

func (_m *MockNodeOptions) SetRetrier(_param0 retry.Retrier) node.NodeOptions {
	ret := _m.ctrl.Call(_m, "SetRetrier", _param0)
	ret0, _ := ret[0].(node.NodeOptions)
	return ret0
}

func (_mr *_MockNodeOptionsRecorder) SetRetrier(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRetrier", arg0)
}

func (_m *MockNodeOptions) SetTransferBufferSize(_param0 int) node.NodeOptions {
	ret := _m.ctrl.Call(_m, "SetTransferBufferSize", _param0)
	ret0, _ := ret[0].(node.NodeOptions)
	return ret0
}

func (_mr *_MockNodeOptionsRecorder) SetTransferBufferSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTransferBufferSize", arg0)
}

func (_m *MockNodeOptions) TransferBufferSize() int {
	ret := _m.ctrl.Call(_m, "TransferBufferSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockNodeOptionsRecorder) TransferBufferSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TransferBufferSize")
}

func (_m *MockNodeOptions) Validate() error {
	ret := _m.ctrl.Call(_m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNodeOptionsRecorder) Validate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Validate")
}
